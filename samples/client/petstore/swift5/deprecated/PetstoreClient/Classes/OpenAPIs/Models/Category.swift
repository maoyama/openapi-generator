//
// Category.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A category for a pet */
public struct Category: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var name: String?

    public init(id: Int64? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public struct NameValidator {
        public struct ValidationError: Error {
            public enum ErrorKind: Error {
                case pattern
            }
            public fileprivate(set) var kinds: Set<ErrorKind>
        }

        public static let pattern = "/^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$/"

        public static func validate(name: String) throws -> String {
            var error = ValidationError(kinds: [])

            let matches = try NSRegularExpression(pattern: pattern, options: .caseInsensitive).matches(in: name, range: .init(location: 0, length: name.utf16.count))
            if matches.isEmpty {
                error.kinds.insert(.pattern)
            }

            guard error.kinds.isEmpty else {
                throw error
            }
            return name
        }
    }
}

